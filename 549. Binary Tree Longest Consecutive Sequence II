/**题目：
Given a binary tree, you need to find the length of Longest Consecutive Path in Binary Tree.

Especially, this path can be either increasing or decreasing. For example, [1,2,3,4] and [4,3,2,1] are both considered valid, but the path [1,2,4,3] is not valid. On the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.

Example 1:
Input:
        1
       / \
      2   3
Output: 2
Explanation: The longest consecutive path is [1, 2] or [2, 1].
Example 2:
Input:
        2
       / \
      1   3
Output: 3
Explanation: The longest consecutive path is [1, 2, 3] or [3, 2, 1].
Note: All the values of tree nodes are in the range of [-1e7, 1e7].
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
//298. Binary Tree Longest Consecutive Sequence
//思路： For each subtree we recursively compute the length of longest ascending and descending path starting from the subtree root. Then we can efficiently check if we could join the two subtree together to get a longer child-parent-child path. In another word, for each subtree, the longest child-parent-child consecutive (with root being the parent) is dec+inc-1 since both the ascending and descending path start from root.
//详细解释：https://leetcode.com/problems/binary-tree-longest-consecutive-sequence-ii/solution/
//time = O(n), space = O(n)
class Solution {
    private int max = 0;
    public int longestConsecutive(TreeNode root) {
        longestPath(root);
        return max;
    }
    
    private int[] longestPath(TreeNode root) {
        if (root == null) {
            return new int[] {0, 0};
        }
// We start off by assigning both increase and decrease as 1 for the current node. This is because the node itself always forms a consecutive increasing as well as decreasing path of length 1.        
        int increase = 1, decrease = 1;
//btain the length of the longest path for the left child of the current node using longestPath[root.left]. Now, if the left child is just smaller than the current node, it forms a decreasing sequence with the current node. Thus, the dcrdcr value for the current node is stored as the left child's decrease value + 1. But, if the left child is just larger than the current node, it forms an incrementing sequence with the current node. Thus, we update the current node's inrinr value as left_child(inr) + 1.
        if (root.left != null) {
            int[] left = longestPath(root.left);
            if (root.val == root.left.val + 1) {
                decrease = left[1] + 1;
            } else if (root.val == root.left.val - 1) {
                increase = left[0] + 1;
            }
        }
        
        if (root.right != null) {
            int[] right = longestPath(root.right);
            if (root.val == root.right.val + 1) {
                decrease = Math.max(decrease, right[1] + 1);  //compare with result got from left subtree to get the max
            } else if (root.val == root.right.val - 1) {
                increase = Math.max(increase, right[0] + 1);
            }
        }
        
        max = Math.max(max, increase + decrease - 1);
        return new int[] {increase, decrease};
    }
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

//Method1: 102. Binary Tree Level Order Traversal完全一样，最后return用Collections.reserve(result)就可以了

//Method2: 还是和102方法一样，但是用result.add(int index, E element): inserts the specified element E at the specified position in this list.It shifts the element currently at that position (if any) and any subsequent elements to the right 
//就是说，插入sublist到result index = 0的位子上，之前在index = 0位子上的数字会依次往后挪
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        
        if (root == null) {
            return result;
        }
        
        queue.offer(root);
        while (!queue.isEmpty()) {
            List<Integer> sublist = new ArrayList<>();
            int levelSize = queue.size();
            for (int i = 0; i < levelSize; ++i) {
                TreeNode node = queue.poll();
                sublist.add(node.val);
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
            result.add(0, sublist);    //原来在index = 0上面的数字会依次往后挪
        }
        return result;
    }
}

//BFS: Recursion 
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
         List<List<Integer>> result = new ArrayList<>();
            levelMaker(result, root, 0);
            return result;
    }
        
    public void levelMaker(List<List<Integer>> result, TreeNode root, int level) {
        if(root == null) {
            return;
        }
        
        if(result.size() < level + 1) {    // 说明还需要添加一行
            result.add(0, new ArrayList<Integer>());     //原来在index = 0上面的数字会依次往后挪
        }
        
        levelMaker(result, root.left, level + 1);
        levelMaker(result, root.right, level + 1);
        result.get(result.size() - level - 1).add(root.val);    //原来在index = 0上面的数字会依次往后挪
    }
}

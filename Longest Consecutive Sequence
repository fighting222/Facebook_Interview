/**题目：
Given a binary tree, find the length of the longest consecutive sequence path.

The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).

For example,
   1
    \
     3
    / \
   2   4
        \
         5
Longest consecutive sequence path is 3-4-5, so return 3.
   2
    \
     3
    / 
   2    
  / 
 1
Longest consecutive sequence path is 2-3,not3-2-1, so return 2.
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

//!!!九章有三种方法答案：http://www.jiuzhang.com/solution/binary-tree-longest-consecutive-sequence/
//题目解释：要找到连续递增的子序列，所以3-2-1不行，因为是的decrease
//Method 1: DFS Recursion, time = O(n), space - O(n) : depth-first search, send cur node value to the next level and compare it with the next level node.
//549. Binary Tree Longest Consecutive Sequence II

class Solution {
    private int max = 0;
    
    public int longestConsecutive(TreeNode root) {
        if (root == null) {
            return 0;
        }
        
        helper(root, 0, root.val);   //root.val to track if the sequence if consecutive
        return max;
    }
    
    private void helper(TreeNode root, int currLevel, int target) {
        if (root == null) {
            return;
        }
        
        if (root.val == target) {
            currLevel++;
        } else {
            currLevel = 1;
        }
        
        max = Math.max(max, currLevel);
        helper(root.left, currLevel, root.val + 1);  //use root.val + 1 to check if the next node is consecutive
        helper(root.right, currLevel, root.val + 1);
    }
}


/**题目：
Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0

In this case, no transaction is done, i.e. max profit = 0.
*/

/**
* Maximum subarray: https://leetcode.com/problems/maximum-subarray/description/
*/
//Method1!!!!!说这个，time = O(n), space = O(1)
/**思路：
根据买卖股票的特性，我们必须先低价买，再高价卖，这个找最大收益的过程实际上是找到目前为之的最低价。在遍历价格数组时，根据这个动态更新的最低价和当前的价格可以算出当前卖股票最大能赚多少钱。We know that to maximize the profit, we need to buy at the lowest price and sell it at the highest price, so we can loop the array to find the minimum price and keep updating the difference between the lowest price and the current price to gain the max profit
*/
class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length == 0) {
            return 0;
        }
        
        int min = prices[0];
        int profit = 0;
        
        for (int i = 1; i < prices.length; ++i) {
            if (prices[i] < min) {
                min = prices[i];
            } else {
                profit = Math.max(profit, prices[i] - min);
            }
        }
        return profit;
    }
}


//Method2: Kadane's Algorithm - S, time = O(n), space = O(1)
class Solution {
//the logic is to calculate the difference (maxCur += prices[i] - prices[i-1]) of the original array, and find a contiguous subarray giving maximum profit. If the difference falls below 0, reset it to zero.
    public int maxProfit(int[] prices) {
        int localMax = 0, globalMax = 0;
        for (int i = 1; i < prices.length; ++i) {
            localMax = Math.max(0, localMax += prices[i] - prices[i - 1]);
            globalMax = Math.max(localMax, globalMax);
        }
        return globalMax;    
    }
}

//Method3: time = O(n), space = O(1)
/**思路：
If we plot the numbers of the given array on a graph, we get:
The points of interest are the peaks and valleys in the given graph. We need to find the largest peak following the smallest valley. We can maintain two variables -> sofarMin and max corresponding to the smallest valley and maximum profit (maximum difference between selling price and minprice) obtained so far respectively.
*/
class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length == 0) {
            return 0;
        }
        
        int max = 0;
        int sofarMin = prices[0];
        for (int i = 0; i < prices.length; ++i) {
            if (prices[i] > sofarMin) {
//例如i=1时，sofarMin = prices[i] = 1，可以不用再考虑sofarMin = prices[0] = 7的情况是因为， 无论后面有再大的数字sale price出现，他与1的差值，都会>和7的差值
                max = Math.max(max, prices[i] - sofarMin);
            } else {
                sofarMin = prices[i];
            }
        }
        return max;
    }
}

/**题目：
Given a string which contains only lowercase letters, remove duplicate letters so that every letter appear once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.

Example:
Given "bcabc"
Return "abc"

Given "cbacdcbc"
Return "acdb"

Credits:
*/



//time = O(n), space = O(n) -> O(n)
//time分析：O(n) time to count index, and as we only have 26 letters, it's about O(26 * 26) to find a candidate letter and O(n) time to remove all index. So I think the running time is O(n).
/**思路：
The basic idea is to find out the smallest result letter by letter (one letter at a time). Here is the thinking process for input "cbacdcbc":

find out the last appeared position for each letter;
c - 7
b - 6
a - 2
d - 4
find out the smallest index from the map in step 1 (a - 2);
the first letter in the final result must be the smallest letter from index 0 to index 2;
repeat step 2 to 3 to find out remaining letters.
the smallest letter from index 0 to index 2: a
the smallest letter from index 3 to index 4: c
the smallest letter from index 4 to index 4: d
the smallest letter from index 5 to index 6: b
注意！！！！after one letter is determined in step 3, it need to be removed from the "last appeared position map -> count", and the same letter should be ignored in the following steps
in step 3, the beginning index of the search range should be the index of previous determined letter plus one


例子：
for "cbacdcbc", we counts each letter's index:
a----2
b----1,6
c----0,3,5,7
d----4
we go from a to d, to find the first letter who has a index smaller than the largest index of the rest. Here, index 2 of letter a is smaller than 6, 7, 4, so we first pick a; then we remove all index smaller than 2, and we have:
b----6
c----3,5,7
d----4
the next round we pick c not b, why ? cuz 6 of b is larger than 4, but 3 of c is smaller than 4 and 6.
b---6
d---4
then we pick d and b to form "acdb"
*/

class Solution {
    public String removeDuplicateLetters(String s) {
        HashMap<Character, ArrayList<Integer>> counts = new HashMap<>();
        ArrayList<Character> keys = new ArrayList<>();   //get all unique characters of the string
        
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (!counts.containsKey(c)) {
                counts.put(c, new ArrayList<Integer>());  
                keys.add(c);
            }
            counts.get(c).add(i);  //store c's index
        }
        
        Collections.sort(keys);  //sort all unique characters in alphbatic order
        StringBuilder sb = new StringBuilder();
        
        while (!counts.isEmpty()) {
            boolean found = true;
            for (int i = 0; i < keys.size(); i++) {
                int index = counts.get(keys.get(i)).get(0);  //get the first index of a char 
                for (int j = 0; j < keys.size(); j++) {
                    ArrayList<Integer> count = counts.get(keys.get(j));
                    if (count.get(count.size() - 1) < index) {  //check if current char's index is smaller than the largest index of the rest
                        found = false;  //the current char's index is NOT smaller than the largest index of the rest -> 换另一个char
                        break;
                    }
                }
                if (found) {
                    sb.append(keys.get(i));   //add the char to result
                    counts.remove(keys.get(i));   //remove the found character from the counts map
                    keys.remove(i);
                    //下面这个for loop做的是得到第一个字母是a之后，j得到char = b, count = {1, 6}是b的index，把b中 < a的index都remove，所以进入next round时b的index就只有6，看上面例子
                    for (int j = 0; j < keys.size(); j++) {
                        ArrayList<Integer> count = counts.get(keys.get(j));
                        while (count.get(0) < index) {
                            count.remove(0);
                        }
                    }
                    break;
                }
                found = true;
            }
        }
        return sb.toString();
    }
}

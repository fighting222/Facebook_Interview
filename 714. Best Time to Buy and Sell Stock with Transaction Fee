/**题目：
Your are given an array of integers prices, for which the i-th element is the price of a given stock on day i; and a non-negative integer fee representing a transaction fee.

You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)

Return the maximum profit you can make.

Example 1:
Input: prices = [1, 3, 2, 8, 4, 9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
Buying at prices[0] = 1
Selling at prices[3] = 8
Buying at prices[4] = 4
Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
*/



//和123 Best time to buy and sell stock III十分相似
//time = O(n), space = O(1)
/**思路：
At the end of the i-th day, we maintain unhold/sell, the maximum profit we could have if we did not have a share of stock, and hold/buy, the maximum profit we could have if we owned a share of stock.

To transition from the i-th day to the i+1-th day, we either sell our stock unhold = max(unhold, hold + prices[i] - fee) -- unhold:no transaction(not sell), hold/buy + prices[i] - fee: choose to sell. 
or buy a stock hold = max(hold, unhold - prices[i]). At the end, we want to return unhold. We need temporary variables to store the max profit because selling and buying on the same day can't be better than just continuing to hold the stock because there is transaction fee.
*/
class Solution {
    public int maxProfit(int[] prices, int fee) {
        int hold = -prices[0], unhold = 0;
        for (int i = 1; i < prices.length; ++i) {
            hold = Math.max(hold, unhold - prices[i]);   //at ith time, buy or not buy buy2 means we want to buy another stock, we already have sell1 money, so after buying stock2 we have buy2 = sell1 - price[i] money left, we want more money left, so we want to buy2 as less as possible so that we can max the money left
            unhold = Math.max(unhold, hold + prices[i] - fee);   //(dont' sell at ith time, sell at the ith time) -> unhold就是上一次sell操作后max left的钱
        }
        return unhold;
    }
}

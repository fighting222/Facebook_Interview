/**题目：
Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

For example,
Given words = ["oath","pea","eat","rain"] and board =

[
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
Return ["eat","oath"].
*/


//Method2: Trie Tree(insert) + DFS, time = O(n^2)
/** 思路：
* Insert word in String into Trie tree
* then search board as word search I, if find a word, add it into our result
*/
class Solution {
    //create a trie tree
    class TrieNode {
        TrieNode[] next = new TrieNode[26];   //all lower cases, only 26 characters
        String word;
    }
    
    public List<String> findWords(char[][] board, String[] words) {
        if (board == null || board.length == 0 || board[0].length == 0) {
            return null;
        }
        
        List<String> list = new ArrayList<>();
        TrieNode root = buildTrie(words);   //build a trie dictionary
        
        for (int i = 0; i < board.length; ++i) {
            for (int j = 0; j < board[0].length; ++j) {
                dfs(board, i, j, root, list);
            }
        }
        return list;
    }
    
    private void dfs(char[][] board, int i, int j, TrieNode node, List<String> list) {
        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length) {   //out of bound
            return;
        }
        
        char c = board[i][j];
        int n = c - 'a';
        if (c == '#' || node.next[n] == null) {   //char c is not in trie tree
            return;
        }
        
        node = node.next[n];
        board[i][j] = '#';
        if (node.word != null) {
            list.add(node.word);
            node.word = null;   //one time search, we already find the word
        }
        
        dfs(board, i - 1, j, node, list);
        dfs(board, i + 1, j, node, list);
        dfs(board, i, j - 1, node, list);
        dfs(board, i, j + 1, node, list);
        
        board[i][j] = c;
    }
    
    private TrieNode buildTrie(String[] words) {
        TrieNode root = new TrieNode();
        
        for (String str : words) {
            TrieNode node = root;
            for (char c : str.toCharArray()) {
                int n = c - 'a';
                if (node.next[n] == null) {   //if char c is not in the dictionary, add it in
                    node.next[n] = new TrieNode();
                }
                node = node.next[n];
            }
            node.word = str;
        }
        return root;
    }
}



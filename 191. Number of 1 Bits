//Method1: Bit Manipulation, time = O(1) -> integer is 32-bits   space = O(1)
/**思路:
we repeatedly flip the least-significant 1-bit of the number to 0, and add 1 to the sum. As soon as the number becomes 0, we know that it does not have any more 1-bits, and we return the sum.
解释说下面：
any number n, we can flips the least-significant 1-bit in n to 0 by doing a bit-wise AND of n and n−1
原因：In the binary representation, the least significant 1-bit in n always corresponds to a 0-bit in n − 1. Therefore, anding the two numbers n and n−1 always flips the least significant 1-bit in n to 0, and keeps all other bits the same.
*/
public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int count = 0;
        while (n != 0) {
            count += n & 1;
            n >>>= 1;   //Then we shift the input Integer by one on the right, to check for the next bit. We need to use bit shifting unsigned operation >>> (while >> depends on sign extension) We keep doing this until the input Integer is 0.
        }
        return count;
    }

/**题目：
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
//Method1: one Queue + Level-Order, time = O(n), space = O(n)
/**思路：
偶数层是从左往右（0， 2……），奇数层是从右往左 （1， 3……）
*/
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
         List<List<Integer>> result = new ArrayList<>();
        
        if (root == null) {
            return result;
        }
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        //根据level奇数偶数add到不同的位子，level % 2 != 0就是reverse的level
        int level = 0;
        
        while(!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> currentLevel = new ArrayList<>();
            
            for (int i = 0; i < size; ++i) {
                TreeNode head = queue.poll();
                if (level % 2 == 0) {
                    currentLevel.add(head.val);  //偶数层（0，2……）顺序往后加
                }else {
                    currentLevel.add(0, head.val);   //奇数层（1， 3……）一直往第一个位子,index = 0的地方加
                }
                
                if (head.left != null) {
                    queue.offer(head.left);
                }
                if (head.right != null) {
                    queue.offer(head.right);
                }
            }
            ++level;
            result.add(currentLevel);
        }
        return result;
    }
}


//Method2: two Stacks + Level Order, time = O(n), space = O(n)
/**思路：
1. 用两个stack来存储curLevel和nextLevel的节点可以实现这样的左右顺序反转。因为stack是先进后出的，节点push进stack的顺序和pop出stack的顺序正好是相反的：
假设stack curLevel pop出的第一个节点是该层的最左节点x，压入x->left和x->right进stack nextLevel。这样依次类推，等整个curLevel的节点都pop出来后，x->left和x->right在nextLevel的最底部。当之后开始pop nextLevel时，最后才pop到x->left和x->right。换句话说，curLevel第一个被访问到的节点的子节点，将在nextLevel中最后被访问到。
2. 这里还需注意的是push left/right child进nextLevel的顺序。当curLevel从左向右访问时，应当先push(x->left)再push(x->right)，反之则应该先push(x->right)再push(x->left)。实现时可以用一个bool变量left2right来表示顺序，每访问完一层后反转left2right的值。
http://www.jyuan92.com/blog/leetcode-binary-tree-zigzag-level-order-traversal/
*/
//Using two Stack, only the stack is used to store the node
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new LinkedList<List<Integer>>();
        if (null == root) {
            return list;
    }
        boolean isNormalOrder = true;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        Stack<TreeNode> nextStack = new Stack<TreeNode>();
        stack.push(root);
 
        while (!stack.isEmpty()) {
            List<Integer> temp = new LinkedList<Integer>();
 
            while (!stack.isEmpty()) {
                TreeNode node = stack.pop();
                temp.add(node.val);
                // if the current level is output in a normal level
                // then the next level should be output reversal.
                if (isNormalOrder) {
                    if (node.left != null) {
                        nextStack.push(node.left);
                    }
                    if (node.right != null) {
                        nextStack.push(node.right);
                    }
                } else {
                    if (node.right != null) {
                        nextStack.push(node.right);
                    }
                    if (node.left != null) {
                        nextStack.push(node.left);
                    }
                }
            }
            list.add(temp);
            Stack<TreeNode> tempStack = stack;
            stack = nextStack;
            nextStack = tempStack;
            isNormalOrder = !isNormalOrder;
        }
        return list;
    }
}

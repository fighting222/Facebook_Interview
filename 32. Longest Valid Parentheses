//Method2； DP, time = O(n), space = O(n)
/**思路
* We can build an integer array call dp, so dp[i] means the length of the longest valid substring ending at ith index. 
Step1: We initialize the complete dp array with 0's. We know that valid substrings must end with ‘)’. So we know that the substrings ending with ‘(’ will always contain '0' at their corresponding dp indices. Thus, we update the dp array only ‘)’ is encountered.
Step2: Fill dp function：we need to consider two considtions
1) s[i] = ')' and s[i - 1] = '(' => dp[i] = dp[i-2] + 2; because the ending "()" portion is a valid substring  and leads to an increment of 2 in the length of the just previous valid substring's length.
2) s[i] = ')' and s[i-1] = ')' string looks like "....))" => if s[i - dp[i-1] - 1] = '(' then dp[i] = dp[i-1] + dp[i-dp[i-1]-2]+2 the reason is that if the 2nd last ')' was a part of a valid substring , for the last ')' to be a part of a larger substring, there must be a corrsponding string '(' which lies before the valid substring of which the 2nd last ')' is a part. So, if the character before the 2nd last ')' happends to be '(', we update the dp[i] as an addition of 2 in length, which dp[i-1].so, we also add the length of the valid substring just before the term "(2nd last)" => dp[i-dp[i-1]-2]
*/
class Solution {
    public int longestValidParentheses(String s) {
        int maxLen = 0;
        int[] dp = new int[s.length()];
        for (int i = 1; i < s.length(); ++i) {
            if (s.charAt(i) == ')') {
                if (s.charAt(i - 1) == '(') {
                    dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;  //if dp[i - 2] == 0,说明是第一对valid = 0 + 2
                } else if (i - dp[i - 1] > 0 && s.charAt(i - dp[i - 1] - 1) == '(') { //在前面某一个地方有对应的‘(’
                    dp[i] = dp[i - 1] + ((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2; //if dp[i - 2] == 0,说明是第一对valid = 0 + 2
                }
                maxLen = Math.max(maxLen, dp[i]);
            }
        }
        return maxLen;
    }
}

//Method3: left to right scan要scan两次: Without extra space, time = O(n), space = O(1)
/**思路：use two counters left and right
* 1. 第一次scan：left -> right: we start traversing the string from the left toward the right. for every '(' (open brackets), we increment the left counter, and for every ')', we increment the right counter. 1)When left counter = right counter, we calculate the length of the current valid string and keep tracking the maxLen found so far. 2) if right > left -> reset left and right counter to be 0, and repeat the process I just described
* 2. 第二次scan：right -> left: do the same thing as the first scan (left >= right, reset = 0)
*/
class Solution {
    public int longestValidParentheses(String s) {
        int maxLen = 0;
        int leftCount = 0, rightCount = 0;
        //first scan: left -> right
        for (int i = 0; i < s.length(); ++i) {
            if (s.charAt(i) == '(') {
                ++leftCount;
            } else {
                ++rightCount;
            }
            
            if (leftCount == rightCount) {
                maxLen = Math.max(maxLen, 2 * rightCount);
            } else if (rightCount >= leftCount) {
                leftCount = rightCount = 0;
            }
        }
        
        leftCount = rightCount = 0;
        //second scan: right -> left
        for (int i = s.length() - 1; i >= 0; --i) {
            if (s.charAt(i) == '(') {
                ++leftCount;
            } else {
                ++rightCount;
            }
            
            if (leftCount == rightCount) {
                maxLen = Math.max(maxLen, 2 * leftCount);
            } else if (leftCount >= rightCount) {
                leftCount = rightCount = 0;
            }
        }
        return maxLen;
    }
}

//题目clarify： If two 1 is adjacent, we consider them in the same island
//!!!!!要问can I changed the element in the input array or not?如果可以的话写Method1，不行的话写follow up2

//BFS: time = O(row * col), space = (max(row, col))
//思路，找到一个1，就把它变成0，再通过BFS把他所有连接的1都找到变成0，然后看做了几次BFS，就有几个island
//Scan each cell in the grid.
//If the cell value is '1' explore that island.
//Mark the explored island cells with '0'. and go 4 directions of the current island to mark them to be 0
//Once finished exploring that island, increment islands counter.
//类似：694. Number of Distinct Islands
//Method1
class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0){
            return 0;
        }
        
        int islands = 0;
        for (int i = 0; i < grid.length; ++i) {
            for (int j = 0; j < grid[0].length; ++j) {
                if (grid[i][j] == '1') {   //如果当前是岛屿的话， 就要把他上下左右变成0
                    markByBFS(grid, i, j);
                    islands++;
                }
            }
        }
        return islands;
    }
//If the cell value is '1' explore that island.
//Mark the explored island cells with '0'.  
    private void markByBFS(char[][] grid, int x, int y) {
        if (x >= 0 && x < grid.length && y >= 0 && y < grid[0].length && grid[x][y] == '1') {
            grid[x][y] = '0';
            markByBFS(grid, x + 1, y);
            markByBFS(grid, x - 1, y);
            markByBFS(grid, x, y + 1);
            markByBFS(grid, x, y - 1);
        }
    }
}


//follow up 1: 如果加上斜的也可以。dfs加四种情况
/**
        markByBFS(grid, i-1, j-1);
        markByBFS(grid, i+1, j+1);
        markByBFS(grid, i-1, j+1);
        markByBFS(grid, i+1, j-1);
*/


//follow up2: 不让改变原有的input(就是不能把explored Island和他的4个方向mark成0），我就说那就建一个相同size的2d boolean visited array to mark the positions we have visited。
class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0] == null || grid[0].length == 0) {
            return 0;
        }
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;
        boolean[][] visited = new boolean[m][n];//O(1) space: directly modify the '1' to '2' to mark grid[i][j] visited
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1' && !visited[i][j]) {
                    dfs(grid, visited, m, n, i, j);
                    count++;
                }
            }
        }
        return count;
    }
    
    private void dfs(char[][] grid, boolean[][] visited, int m, int n, int i, int j) {
        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] != '1' || visited[i][j]) {//remember to add grid[i][j] != '1' !!!
            return;
        }
        visited[i][j] = true;
        dfs(grid, visited, m, n, i + 1, j);
        dfs(grid, visited, m, n, i - 1, j);
        dfs(grid, visited, m, n, i, j + 1);
        dfs(grid, visited, m, n, i, j - 1);
    }
}


//follow up 3: Largest Size of Island
//MethodA: DFS !!!!!!!!return 是6？？？？
public class Solution {
    public static int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0] == null || grid[0].length == 0) {
            return 0;
        }
        int m = grid.length;
        int n = grid[0].length;
        int max = 0;
        boolean[][] visited = new boolean[m][n];//O(1) space: directly modify the '1' to '2' to mark grid[i][j] visited
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1' && !visited[i][j]) {
                    max = Math.max(max, dfs(grid, visited, m, n, i, j));
                }
            }
        }
        return max;

    }

    private static int dfs(char[][] grid, boolean[][] visited, int m, int n, int i, int j) {
        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] != '1' || visited[i][j]) {//remember to add grid[i][j]!= '1' !!!
            return 0;
        }
        visited[i][j] = true;
        return 1 + dfs(grid, visited, m, n, i + 1, j) + dfs(grid, visited, m, n, i - 1, j)
                + dfs(grid, visited, m, n, i, j + 1) + dfs(grid, visited, m, n, i, j - 1);
    }

    public static void main(String[] args) {
        char[][] grid = new char[][]{
                {'1','1','1','0'},
                {'1','0','1','1'},
                {'0','1','0','0'},
                {'1','1','0','1'}
        };
        int res = numIslands(grid);
        System.out.println("max " + res);
    }
}

//follow up 3: MethodB: bfs
public class Solution {
    private static int[][] move = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

    public static int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0] == null || grid[0].length == 0) {
            return 0;
        }
        int m = grid.length;
        int n = grid[0].length;
        int max = 0;
        boolean[][] visited = new boolean[m][n];//O(1) space: directly modify the '1' to '2' to mark grid[i][j] visited
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1' && !visited[i][j]) {
                    max = Math.max(bfs(grid, visited, queue, m, n, i, j), max);
                }
            }
        }
        return max;
    }

    private static int bfs(char[][] grid, boolean[][] visited, Queue<Integer> queue, int m, int n, int i, int j) {
        int size = 0;
        queue.offer(i * n + j);
        visited[i][j] = true;
        while (!queue.isEmpty()) {
            int key = queue.poll();
            size++;
            i = key / n;
            j = key % n;
            for (int k = 0; k < move.length; k++) {
                int nextI = i + move[k][0];
                int nextJ = j + move[k][1];
                if (isValid(grid, visited, m, n, nextI, nextJ)) {
                    queue.offer(nextI * n + nextJ);
                    visited[nextI][nextJ] = true;
                }
            }
        }
        return size;
    }

    private static boolean isValid(char[][] grid, boolean[][] visited, int m, int n, int i, int j) {
        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] != '1' || visited[i][j]) {
            return false;
        }
        return true;
    }

    public static void main(String[] args) {
        char[][] grid = new char[][]{
                {'1','1','1','0'},
                {'1','0','1','1'},
                {'0','1','0','0'},
                {'1','1','0','1'}
        };
        int res = numIslands(grid);
        System.out.println("max " + res);
    }
}


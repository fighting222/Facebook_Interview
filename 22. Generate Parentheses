/**题目：
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
*/



/backtracking: time = O(n!)
//1. 只要"("的数量没有超过n，都可以插入"("。we can keep putting open brackets, as long as its amount is <= n
//2. 而可以插入")"的前提则是当前的"("数量必须要多余当前的")"数量。//the condition for us to inset close brackets is that '(' >= ')'
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        if (n <= 0) {
            return result;
        }
        helper(result, "", n, n);  //n, n how many left/right parenthesis we nned to add 
        return result;
    }
    
    private void helper(List<String> result, String paren, int left, int right) {   //paren: current paren
        if (left == 0 && right == 0) {
            result.add(paren);  //get a possible result
            return;
        }
        
        if (left > 0) {
            helper(result, paren + "(", left - 1, right);
        }
        if (right > 0 && left < right) {
            helper(result. paren + ")" + left, right - 1);
        }
    }
}


//same idea, but 用StringBuilder
class Solution {
    public List<String> generateParenthesis(int n) {
     List<String> res = new ArrayList<>();
     helper(res, new StringBuilder(), 0, 0, n);
     return res;
    }

    private void helper(List<String> res, StringBuilder sb, int open, int close, int n) {
        if(open == n && close == n) {
            res.add(sb.toString());
            return;
        }
    
        if(open < n) {
            sb.append("(");
            helper(res, sb, open+1, close, n);
            sb.setLength(sb.length()-1);
        } 
        if(close < open) {
            sb.append(")");
            helper(res, sb, open, close+1, n);
            sb.setLength(sb.length()-1);
        }
    }
}

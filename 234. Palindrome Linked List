/**题目：
Given a singly linked list, determine if it is a palindrome.

Follow up:
Could you do it in O(n) time and O(1) space?
*/


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

/**Method 1: Stack, time = O(n), space = O(n)
* 1) Traverse the given list from head to tail and push every visited node to stack.
  2) Traverse the list again. For every visited node, pop a node from stack and compare data of popped node with currently          visited node.
  3) If all nodes matched, then return true, else false.
*/
class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode curr = head;
        Stack<ListNode> stack = new Stack<>();
        while (curr != null) {
            stack.push(curr);
            curr = curr.next;
        }
        
        while (head != null) {
            ListNode node = stack.pop();
            if (node.val == head.val) {
                head = head.next;
            } else {
                return false;
            }
        }
        return true;
    }
}


//Method 2: Reverse the linked list at the middle point
/** time = O(n), space = O(1)
* 1) Get the middle of the linked list.
  2) Reverse the second half of the linked list.
  3) Check if the first half and second half are identical.
  4) Construct the original linked list by reversing the second half again and attaching it back to the first half

To divide the list in two halves, method 2 of this post is used.
When number of nodes are even, the first and second half contain exactly half nodes. The challenging thing in this method is to handle the case when number of nodes are odd. We don’t want the middle node as part of any of the lists as we are going to compare them for equality. For odd case, we use a separate variable ‘midnode’.
* http://www.geeksforgeeks.org/function-to-check-if-a-singly-linked-list-is-palindrome/
*/
class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode fast = head, slow = head;
        while (fast!= null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;           
//if linked list's length is a even number, the slow is at the middle of the list & fast = null结束循环
        }
        
        if (fast != null) {
            slow = slow.next; //1->2->3->2->1->null, 结束上一个循环slow = 2(第一个)，fast = 1(最后一个)
        }
        fast = head;    //fast = 1(第一个)；
        slow = reverse(slow);
        
        while (slow != null) {   //slow是新的reverse list的head：2->1->null变成了1->2->null
            if (fast.val != slow.val) {   //fast是原list的head，从原来list head开始和reverse的部分作对比
                return false;
            }
            fast = fast.next;
            slow = slow.next;
        }
        return true;
    }
    
    
    
    private ListNode reverse(ListNode head) {
        ListNode prev = null;
        while (head != null) {
            ListNode next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }
}

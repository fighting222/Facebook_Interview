/**题目:
Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
*/


//Method1: Backtracking, Recursion, time = O(n*2^n), spent O(n) time within calls
//T(n) satisfies the recurrence T(n) = T(n - 1) + T(n - 2) + ... + T(1) + T(0), which solves to T(n) = O(2^n)
//O(n) stack space
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> results = new ArrayList<>();
        
        if (nums == null || nums.length == 0) {
            return results;    
        }
        
        //Arrays.sort(nums);
        List<Integer> subsets = new ArrayList<>();
        subsetHelper(nums, 0, subsets, results);
        
        return results;
    }
    
    private void subsetHelper(int[] nums, int startIndex, List<Integer> subsets,
                            List<List<Integer>> results) {
        //deep copy && add subset to results
        results.add(new ArrayList<Integer>(subsets));
        
        for (int i = startIndex; i < nums.length; ++i) {
            subsets.add(nums[i]);   //加入nums[i]
            subsetHelper(nums, i + 1, subsets, results);  //递归，i + 1，是不保证不会再visit已经visited的数
            subsets.remove(subsets.size() - 1);  //移除nums[i]
        }
    }
}


//Method2:
//iterative: O((existOrNot ^ nums.length) * nums.length)=O((2^n) * n) time, O(1) space
 // 1 << n is 2^n, which is the total number of combinations of states
        // each subset equals to an binary integer between 0 .. 2^n - 1
        // 0 -> 000 -> []
        // 1 -> 001 -> [1]
        // 2 -> 010 -> [2]
        // ..
        // 7 -> 111 -> [1,2,3]
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        int n = nums.length;
        //Arrays.sort(nums); no need to sort
        for (int i = 0; i < (1 << n); i++) {//2^n kinds of state 
            ArrayList<Integer> list = new ArrayList<>();
            for (int j = 0; j < n; j++) {//if jth bit of i is 1,nums[j] exists in this combination;Note set doesn't have order
                if ((i & (1 << j)) != 0) {//don't use ==1 cuz this's only jth bit! eg.110 & 010=010=2,doesn't means it's 1 !! 
                    list.add(nums[j]);//also remember to add () for (i & (1 << j)) !!!!!!
                }
            }
            res.add(list);
        }
        return res;
    }
}


//follow up1: next()
public static void main (String[] args) throws java.lang.Exception {
        int[] tes = {1,2,3};
        myCode sol = new myCode();
        List<List<Integer>> result = new ArrayList<>(sol.subsets(tes));
        for( List<Integer> list : result){
            for( int i = 0 ; i < list.size(); i++){
                System.out.print(list.get(i) + ",");
            }
            System.out.println();
        }
        System.out.println("Using next()");
        List<Integer> test1 = sol.next(result);
        for(int num : test1 ){
            System.out.print(num);
        }
        List<Integer> test2 = sol.next(result);
        for(int num : test2 ){
            System.out.print(num);
        }
        List<Integer> test3 = sol.next(result);
        for(int num : test3 ){
            System.out.print(num);
        }

    }
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        res.add( new ArrayList<>());
        for( int i : nums ){
            int size = res.size();
            for( int j = 0 ; j < size ; j++){
                List<Integer> newList = new ArrayList<>(res.get(j));
                newList.add(i);
                res.add(newList);
            }
        }
        return res;
    }
    public List<Integer> next(List<List<Integer>> subset){
        List<Integer> res = subset.get(0);
        subset.remove(res);
        return res;
    }
}


//follow up2:输入一串无重复字母和一个target，输出size为target的全部可能性，可重复使用字符, time = n^k
class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> results = new ArrayList<>();
        List<Integer> subsets = new ArrayList<>();
        helper(results, subsets, 1, n, k);
        return results;
    }
    
    private void helper(List<List<Integer>> results,
                       List<Integer> subsets, int startIndex, int n, int k) {
        if (k == 0) {
            results.add(new ArrayList<Integer>(subsets));
            return;
        }
        
        for (int i = startIndex; i <= n; i++) {
            subsets.add(i);
            helper(results, subsets, i, n, k - 1); 
            subsets.remove(subsets.size() - 1);
        }
    }
}

/**题目：
Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].

Note:
You must do this in-place without making a copy of the array.
Minimize the total number of operations.

*/


// 保持原有数组中非零数字的order！！！！！
//Method1: Two Pointers, time = O(n), space = O(1)，
//follow up: 如果数组里有很多零，用这个，# of operations = 2 * (num of non-zero)
//思路：we can use two pointers left and right, both start at position 0, we keep moving the right pointer to find the first non-zero position, and swap it with the left 
class Solution {
    public void moveZeroes(int[] nums) {
        //base case
        if (nums == null || nums.length == 0) {
            return;
        }
        
        int left = 0, right = 0;
        while (right < nums.length) {   //这不不能是right < nums.length - 1因为这样left无法check到最后一位
            if (nums[right] != 0) {
                int temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;
                ++left; //去下一个需要check的数字,这里因为换过来的right肯定不是0，所以可以移动left到下一位
            }
            ++right;//to find the non-zero number，这里不能写成 else {++right}
        }
    }
}

//Method2: Insert, follow up: 如果有很多非零element用这个，operation = nums.length
//time = O(n), space = O(1)
// 说Shift non-zero values as far forward as possible
// 说Fill remaining space with zeros
/**思路：
use a variable call insetPos to represent the insert position where we need non-zero elements, then loop the array, once we find a non-zero number, insert it into the "insetPos"

ex. nums = [0, 1, 0 , 3] , index = 0
nums[0] == 0, 跳過
nums[1] == 1, nums[0] = 1, index++;
nums[2] == 0, 跳過
nums[3] == 3, nums[1] = 3, index++;
結束後 nums = [1,3,0,3]，接下來將nums後面的[0,3]用0取代
*/
class Solution {
    public void moveZeroes(int[] nums)  {
        if (nums == null || nums.length == 0) {
            return;
        }
        
        int insertPos = 0;
        for (int i = 0; i < nums.length; ++i) {
            // not zero, insertPos++, push to array
            if (nums[i] != 0) {
                nums[insertPos] = nums[i];
                insertPos++;
            }
        }
        
        // Fill remaining space with zeroes
        while (insertPos < nums.length) {
            nums[insertPos++] = 0;
        }
    }
}


//time = O(logn)
//!!!这个版本不能用在这道题，因为他没有保持原来数组中数字的order，他得到[12, 1, 3, 0, 0]但是我们应该得到[1, 3, 12, 0, 0]
// class Solution {
//     public void moveZeroes(int[] nums) {
//         int left = 0, right = nums.length - 1;
//         while (left <= right) {
//             if (nums[left] == 0) {
//                 int temp = nums[left];
//                 nums[left] = nums[right];
//                 nums[right] = temp;
//                 --right;
//             } else {
//                 ++left;
//             }
//         }
//     }
// }


//follow up 1: Return the length of non-zero part (Two Pointers)
//移动几次：num of zero
//we only care whether all non-zero are in length,don't care what nums are after length, the index of the left pointer is the result
class Solution {
    public int moveZeroes(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int left = 0;
        int right = nums.length - 1;
        while (left < right) {
            while (left < right&&nums[left] != 0) {
                left++;
            }
            while (left < right&&nums[right] == 0) {
                right--;
            }
            if (left < right) {
                nums[left++] = nums[right--];//we only write non-zero to left part
                //if we only care zero, only use nums[right--] = nums[left++] above, and return right
                /*
                nums[left++]=nums[right];
                nums[right--]=0;//前面是数，后面是0的情况这么写，但不是排序的了
                */
            }
        }
        return left;
    }
}


//follow up 2:moveZero to front, moveOne to back, maintain the order of other non-zero and non-one elements
class Solution {
    public void moveZeroes(int[] nums) {
        if (nums == null || nums.length == 0) {
            return;
        }
        //Step1: move all 0 and non-zero numbers to front
        int insert = 0;
        for (int i = 0; i < nums.length; i++) {//move all non-one to front
            if (nums[i] != 1) {
                nums[insert++] = nums[i];
            }
        }
        //Step2: fill the rest space after 0 and non-zero part to be 1
        int temp = insert - 1;//save the position before all one
        while (insert < nums.length) {//fill one to back
            nums[insert++] = 1;
        }
        
        //Step3: deal the front part that mix with 0 and non-zero elements -> move all non-zero elements to the middle part
        insert = temp;//skip all one at the back
        for (int i = insert; i >= 0; i--) {//move all non-zero to center (start from index before all one)
            if (nums[i] != 0) {
                nums[insert--] = nums[i];
            }
        }
        //Step4: fill all front part with 0
        while (insert >= 0) {//fill zero to front
            nums[insert--] = 0;
        }
    }
}


/**Binary Search: 
1. 如果没有duplicates：如果中间的数小于最右边的数，则右半段是有序的，若中间数大于最右边数，则左半段是有序的。
2. duplicates: 当有重复数字，会存在A[mid] = A[end]的情况。此时右半序列A[mid-1 : end]可能是sorted，也可能并没有sorted，如下例子。

3 1 2 3 3 3 3       nums[mid] == nums[end]，target既可以在left part，又可以在right part
3 3 3 3 1 2 3

所以当A[mid] = A[end] != target时，无法排除一半的序列，而只能排除掉A[end]：
A[mid] = A[end] != target时：搜寻A[start : end-1]， keep doing this until nums[mid] != nums[end]，然后就可以按照没有重复的情况作了

而如果可以有重复值，就会出现来面两种情况，[3 1 1] 和 [1 1 3 1]，对于这两种情况中间值等于最右值时，目标值3既可以在左边又可以在右边，那怎么办么，对于这种情况其实处理非常简单，只要把最右值向左一位即可继续循环，如果还相同则继续移，直到移到不同值为止，
3. average time = O(logn), worst time = O(n), 试想一个数组有同一数字组成{1，1，1，1，1}，target=2, 那么这个算法就会将整个数组遍历，时间复杂度由O(logn)升到O(n)
*/
//average time = O(logn), worst time = O(n),  space = O(1)
class Solution {
    public boolean search(int[] nums, int target) {
        int start = 0, end = nums.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                return true;
            }
            if (nums[mid] < nums[end]) {   //right part is sorted, but left part is unsorted
                if (target > nums[mid] && target <= nums[end]) {
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            } else if (nums[mid] > nums[end]) {   //left part is sorted
                if (target >= nums[start] && target < nums[mid]) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            } else {   //nums[mid] = nums[end] != target
                --end;
            }
        }
        return false;
    }
}

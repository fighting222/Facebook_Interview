//Method1: Dynamic Programming，小本本第7页！！！！
//time = O(n^2), space = O(n) --- used by hashSet
/**思路：
1. First we can build a boolean array dp array to store the intermediate process results. (We make use of dp array of size n+1, where n is the length of the given string.) Initialize boolean dp array, we initialize the element dp[0] as true, since the null string is always present in the dictionary, and the rest of the elements of dp as false.
2. We also use two index pointers i and j, where i refers to the length of the substring (s') considered currently starting from the beginning, and j refers to the index partitioning the current substring (s')  into smaller substrings s'(0, j) and s'(j+1,i)
3. Use a HashSet to store our dictionary 

*/
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        if (s == null || wordDict == null) {
            return false;
        }
        
        //建一个hashset把wordDict里面的单词存起来，因为List of Stirng的搜索效率比较低
        HashSet<String> dict = new HashSet<>();
        for (String str : wordDict) {
            dict.add(str);
        }
        
        //initialize state
        //s.length + 1因为在s里面，去长度为i的substring，这个substring是否能由字典里的一个或几个单词组成
        //canSegment[i] is true if substring(0, i) is in wordDict
        boolean[] canSegment = new boolean[s.length() + 1]; //这里是size
        canSegment[0] = true;   //什么都不包括，是一个空字符的时候是true。那么根据这个我们知道result应该返回return boolean[s.length],这里是index
        
        //for loop解释看小本本！！！！！！
        //DP: 当前i状态，由i-1状态决定
        //for example: s = abcdefg, the substring we are currently checking is abc|de, i = 5, j = 3;
        for (int i = 1; i <= s.length(); ++i) { // 这里注意是 <= & i = 长度，不是index, i is the length of current substring
            for (int j = i; j > 0; --j) {   //start of substring
                String sub = s.substring(i - j, i);  //de
                if (dict.contains(sub)) {
                    if (canSegment[i - j] == true) { //abc
                        canSegment[i] = true;
                        break;
                    }    
                }
            }
        }
        return canSegment[s.length()]; //这里是index 是否整个s都contain在dictionary里面
    }
}

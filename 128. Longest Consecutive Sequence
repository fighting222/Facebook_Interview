/**题目：
Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

For example,
Given [100, 4, 200, 1, 3, 2],
The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.

Your algorithm should run in O(n) complexity.
*/



//HashSet, time = O(n)， hash insert and search take O(1) time, space = O(unique nums) space
/**思路：将所有数都加入hashset，然后再遍历这些数，因为我们能O(1)的判断某个数是否在集合中，所以我们可以一个个向上或者向下检查。为了避免之后重复检查，我们每查到一个数
，都要将其从集合中移除。这样每遇到一个数，都检查它的上下边界，就能找出最长的连续数列。时间复杂度仍是O(N)，因为我们不会检查不存在于数组的数，而存在于数组的数也只会检查一次。
we can put all numbers into a HashSet and them loop the input array to check if is leftBound of rightBound in the HashSet or not. By this I mean, for example, the current element is nums[i], we wil check if nums[i] - 1 or nums[i] + 1 in the set or not. if it is, we will update the length of consecutive substring. 
*/
class Solution {
    public int longestConsecutive(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        HashSet<Integer> set = new HashSet<>();
        int max = 0;
        for (int i : nums) {// 先将所有数字加入数组中
            set.add(i);
        }
        
        for (int i = 0; i < nums.length; i++) {
            int len = 1; //curr[i]
            int down = nums[i] - 1;  // 一个一个检查下边界
            while (set.contains(down)) {
                set.remove(down);//remember to remove
                down--;
                len++;
            }
            int up = nums[i] + 1;   // 一个一个检查上边界
            while (set.contains(up)) {
                set.remove(up);//remember to remove
                up++;
                len++;
            }
             max = Math.max(max, len); 
        }
        return max;
    }
}



//HashMap<Integer, Integer> map, the key store the current number, value stored the consective length of it
//time: Everything inside the for loop is O(1) so the total time is O(n)
/**思路： We will use HashMap. The key thing is to keep track of the sequence length and store that in the boundary points of the sequence. For example, as a result, for sequence {1, 2, 3, 4, 5}, map.get(1) and map.get(5) should both return 5.
Whenever a new element n is inserted into the map, do two things:
1. See if n - 1 and n + 1 exist in the map, and if so, it means there is an existing sequence next to n. Variables left and right will be the length of those two sequences, while 0 means there is no sequence and n will be the boundary point later. Store (left + right + 1) as the associated value to key n into the map. For example, the current number = 3, we find that n - 1 = 2, and n + 1 = 4 are inthe hash map. we know that if 2 is the end position of a consecutive sequence(1, 2) -> left = 2, same thing, 4 as the end position(4, 5) -> right = 2, so our new consecutive length after add the current element 3 = left + right + 1
2. Use left and right to locate the other end of the sequences to the left and right of n respectively, and replace the value with the new length
*/
class Solution {
    public int longestConsecutive(int[] nums) {
        int res = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
//why we need map.put(n,sum) is that if we don't include it into the map. Next time the same number comes in it will update the sum again.
//This explained, if not in the map, the duplicate number will come to check n-1 and n+1, but n-1 and n+1 can be outdated, which is wrong to update the length again.
        for (int n : nums) {
            if (!map.containsKey(n)) {
                int left = (map.containsKey(n - 1)) ? map.get(n - 1) : 0;
                int right = (map.containsKey(n + 1)) ? map.get(n + 1) : 0;
                 //sum: length of the sequence n is in:
                int sum = right + left + 1;  
                map.put(n, sum);  //why we need map.put(n,sum) is that if we don't include it into the map. Next time the same number comes in it will update the sum again.
            
                //keep tacking the max length
                res = Math.max(res, sum);
                
                // extend the length to the boundary(s) of the sequence
                // will do nothing if n has no neighbors
                map.put(n - left, sum);
                map.put(n + right, sum);
            } else {   //duplicates
                continue;
            }
        }
        return res;
    }
}

/**题目：
You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.


*/


/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */

/**思路：
这道题是一个二分查找的题目。由于只要出现了一个bad version后面所有的version都会变成bad version。因此我们只需要用二分法找到一个节点，这个节点是bad version而它前一个节点不是bad version就好了。由于使用了二分法，因此算法的时间复杂度是
*/
//Binary Search, time = O(logn), space = O(1)

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int start = 1, end = n;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (isBadVersion(mid)) {
                end = mid;
            } else {
                start = mid;
            }
        }
        
        if (isBadVersion(start)) {
            return start;
        }
        return end;
    }
}

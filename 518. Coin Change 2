/**题目：You are given coins of different denominations and a total amount of money. Write a function to compute the number 
of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.
例子：
Input: amount = 5, coins = [1, 2, 5]
Output: 4
Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1
*/

//Method1: Using 2d array -> knapsack problem背包问题: time = O(n * amount), space = O(m)
/**思路：
dp[i][j] : the number of combinations to make up amount j by using the first i types of coins
State transition:
1. not using the ith coin, only using the first i-1 coins to make up amount j, then we have dp[i-1][j] ways.
2. using the ith coin, since we can use unlimited same coin, we need to know how many way to make up amount j - coins[i] by using first i coins(including ith), which is dp[i][j-coins[i]]
初始化：Initialization: dp[i][0] = 1
*/
class Solution {
    public int change(int amount, int[] coins) {
        
        int[][]dp = new int[coins.length + 1][amount + 1];
        dp[0][0] = 1;
        
        for (int i = 1; i <= coins.length; ++i) {
            dp[i][0] = 1;
            for (int j = 1; j <= amount; ++j) {  //因为是总共的方法，所以是用ith coin和不用ith coin相加
                dp[i][j] = dp[i - 1][j] + (j >= coins[i - 1] ? dp[i][j - coins[i - 1]] : 0);
            }
        }
        return dp[coins.length][amount];
    }
}


//Method2: Using 1d array, time = O(n * amount), space = O(m)
//思路： dp[i][j] only rely on dp[i-1][j] and dp[i][j-coins[i]], then we can optimize the space by only using one-dimension array.
class Solution {
    public int change(int amount, int[] coins) {
        int[] dp = new int[amount + 1];
        dp[0] = 1;
        for (int coin : coins) {
            for (int i = coin; i <= amount; i++) {
                dp[i] += dp[i - coin];
            }
        }
        return dp[amount];
    }
}

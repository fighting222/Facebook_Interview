/**题目：
Given a nested list of integers, implement an iterator to flatten it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Example 1:
Given the list [[1,1],2,[1,1]],

By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].

Example 2:
Given the list [1,[4,[6]]],

By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].
*/



/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
/**解题思路： 迭代器一般都是用迭代的方法来解的，而递归一般都需用栈来辅助遍历，由于栈的后进先出的特性，我们在对向量遍历的时候，从后往前把对象压入栈中，那么第一个对象最后压入栈就会第一个取出来处理，我们的hasNext()函数需要遍历栈，并进行处理，如果栈顶元素是整数，直接返回true，如果不是，那么移除栈顶元素，并开始遍历这个取出的list，还是从后往前压入栈，循环停止条件是栈为空，返回false
英文版：In the constructor, we push all the nestedList into the stack from back to front, so when we pop the stack, it returns the very first element. Second, in the hasNext() function, we peek the first element in stack currently, and if it is an Integer, we will return true and pop the element. If it is a list, we will further flatten it. This is iterative version of flatting the nested list. Again, we need to iterate from the back to front of the list.
*/
//参考：339：Nested List Weight Sum
//版本1：flatten the list while calling hasNext(), using stack; O(n) time, O(n) space
public class NestedIterator implements Iterator<Integer> {
    List<NestedInteger> list;
    Stack<NestedInteger> stack = new Stack<>();
    
    public NestedIterator(List<NestedInteger> nestedList) {
        list = nestedList;
        for (int i = list.size() - 1; i >= 0; --i) {
            stack.push(list.get(i)); //add all NestedInteger in the list   //我们在对向量遍历的时候，从后往前把对象压入栈中，那么第一个对象最后压入栈就会第一个取出来处理
        }
    }
    
// @return {int} the next element in the iteration
    @Override
    public Integer next() {
        return stack.pop().getInteger();//remember to use getInteger() cuz what we pop out it's a NestedInteger,not an Integer
    }

    // @return {boolean} true if the iteration has more element or false
    @Override
    public boolean hasNext() { //amortized O(1) time
        while (!stack.isEmpty()) {
            if (stack.peek().isInteger()) {  //if it's an integer,we return true and let the pop() take place in next()
                return true;
            }
            
            NestedInteger curt = stack.pop();
            for (int i = curt.getList().size() - 1; i >= 0; --i) {
                stack.push(curt.getList().get(i));
            }
        }
        return false;
    }
}
